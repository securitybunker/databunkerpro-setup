{{- if and .Values.ssl.enabled .Values.ssl.generateSelfSigned.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "databunkerpro.fullname" . }}-ssl-certs
  labels:
    {{- include "databunkerpro.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    metadata:
      labels:
        {{- include "databunkerpro.labels" . | nindent 8 }}
    spec:
      restartPolicy: Never
      containers:
        - name: ssl-cert-generator
          image: alpine:3.22
          command:
            - /bin/sh
            - -c
            - |
              # Install OpenSSL and kubectl
              apk add --no-cache openssl curl kubectl
              # Create temporary directory for certificates
              mkdir -p /tmp/certs
              # Generate private key
              openssl genrsa -out /tmp/certs/{{ .Values.ssl.certificate.keyFile }} {{ .Values.ssl.generateSelfSigned.keySize }}
              # Generate certificate signing request
              openssl req -new -key /tmp/certs/{{ .Values.ssl.certificate.keyFile }} \
                -out /tmp/cert.csr \
                -subj "/C={{ .Values.ssl.generateSelfSigned.country }}/ST={{ .Values.ssl.generateSelfSigned.state }}/L={{ .Values.ssl.generateSelfSigned.locality }}/O={{ .Values.ssl.generateSelfSigned.organization }}/CN={{ .Values.ssl.generateSelfSigned.commonName }}"              
              # Generate self-signed certificate
              openssl x509 -req -in /tmp/cert.csr \
                -signkey /tmp/certs/{{ .Values.ssl.certificate.keyFile }} \
                -out /tmp/certs/{{ .Values.ssl.certificate.certFile }} \
                -days {{ .Values.ssl.generateSelfSigned.duration }} \
                -sha256             
              # Create Kubernetes secret with certificates
              kubectl create secret tls {{ include "databunkerpro.fullname" . }}-tls \
                --cert=/tmp/certs/{{ .Values.ssl.certificate.certFile }} \
                --key=/tmp/certs/{{ .Values.ssl.certificate.keyFile }} \
                --dry-run=client -o yaml | kubectl apply -f -
              echo "SSL certificates generated and stored in secret: {{ include "databunkerpro.fullname" . }}-tls"
          env:
            - name: KUBECONFIG
              value: "/var/run/secrets/kubernetes.io/serviceaccount/kubeconfig"
          volumeMounts:
            - name: kubeconfig
              mountPath: /var/run/secrets/kubernetes.io/serviceaccount
              readOnly: true
      volumes:
        - name: kubeconfig
          secret:
            secretName: {{ include "databunkerpro.fullname" . }}-kubeconfig
            defaultMode: 0600
            items:
              - key: kubeconfig
                path: kubeconfig
      serviceAccountName: {{ include "databunkerpro.serviceAccountName" . }}
{{- end }}
