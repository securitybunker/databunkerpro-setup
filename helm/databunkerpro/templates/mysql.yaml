{{- if and (not .Values.database.external) (eq .Values.database.type "mysql") }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "databunkerpro.fullname" . }}-mysql
  labels:
    {{- include "databunkerpro.labels" . | nindent 4 }}
    app.kubernetes.io/component: mysql
spec:
  serviceName: {{ include "databunkerpro.fullname" . }}-mysql
  replicas: 1
  selector:
    matchLabels:
      {{- include "databunkerpro.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: mysql
  template:
    metadata:
      labels:
        {{- include "databunkerpro.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: mysql
    spec:
      initContainers:
        - name: init-chown-data
          image: busybox
          command: ["chown", "-R", "999:999", "/var/lib/mysql"]
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
      containers:
        - name: mysql
          image: "{{ .Values.database.internal.mysql.image.repository }}:{{ .Values.database.internal.mysql.image.tag }}"
          ports:
            - name: mysql
              containerPort: 3306
              protocol: TCP
          env:
            - name: MYSQL_DATABASE
              value: {{ .Values.database.internal.mysql.auth.database | quote }}
            - name: MYSQL_USER
              value: {{ .Values.database.internal.mysql.auth.username | quote }}
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "databunkerpro.fullname" . }}-db
                  key: password
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "databunkerpro.fullname" . }}-db
                  key: root-password
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
          resources:
            {{- toYaml .Values.database.internal.mysql.resources | nindent 12 }}
          securityContext:
            runAsUser: 999
            runAsGroup: 999
            fsGroup: 999
          readinessProbe:
            exec:
              command:
                - mysqladmin
                - ping
                - -h
                - localhost
                - -u
                - root
                - -p${MYSQL_ROOT_PASSWORD}
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          livenessProbe:
            exec:
              command:
                - mysqladmin
                - ping
                - -h
                - localhost
                - -u
                - root
                - -p${MYSQL_ROOT_PASSWORD}
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.database.internal.mysql.persistence.size }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "databunkerpro.fullname" . }}-mysql
  labels:
    {{- include "databunkerpro.labels" . | nindent 4 }}
    app.kubernetes.io/component: mysql
spec:
  type: ClusterIP
  ports:
    - port: 3306
      targetPort: mysql
      protocol: TCP
      name: mysql
  selector:
    {{- include "databunkerpro.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: mysql
{{- end }} 