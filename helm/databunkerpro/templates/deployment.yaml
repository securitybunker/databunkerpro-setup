apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "databunkerpro.fullname" . }}
  labels:
    {{- include "databunkerpro.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "databunkerpro.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: databunkerpro
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "databunkerpro.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: databunkerpro
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "databunkerpro.serviceAccountName" . }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if and .Values.ssl.enabled (not .Values.ssl.certificate.secretName) .Values.ssl.certificate.generateSelfSigned.enabled }}
      initContainers:
        - name: init-ssl
          image: alpine:3.22
          command:
            - /bin/sh
            - -c
            - |
              # Install OpenSSL
              apk add --no-cache openssl
              # Create certificates directory
              mkdir -p /databunker/certs
              # Generate private key
              openssl genrsa -out /databunker/certs/{{ .Values.ssl.certificate.keyFile }} {{ .Values.ssl.certificate.generateSelfSigned.keySize }}
              # Generate certificate signing request
              openssl req -new -key /databunker/certs/{{ .Values.ssl.certificate.keyFile }} \
                -out /tmp/cert.csr \
                -subj "/C={{ .Values.ssl.certificate.generateSelfSigned.country }}/ST={{ .Values.ssl.certificate.generateSelfSigned.state }}/L={{ .Values.ssl.certificate.generateSelfSigned.locality }}/O={{ .Values.ssl.certificate.generateSelfSigned.organization }}/CN={{ .Values.ssl.certificate.generateSelfSigned.commonName }}"
              # Generate self-signed certificate
              openssl x509 -req -in /tmp/cert.csr \
                -signkey /databunker/certs/{{ .Values.ssl.certificate.keyFile }} \
                -out /databunker/certs/{{ .Values.ssl.certificate.certFile }} \
                -days {{ .Values.ssl.certificate.generateSelfSigned.duration }} \
                -sha256
              # Set proper permissions
              chmod 600 /databunker/certs/{{ .Values.ssl.certificate.keyFile }}
              chmod 644 /databunker/certs/{{ .Values.ssl.certificate.certFile }}
              chown -R 1000:1000 /databunker/certs
              echo "Self-signed SSL certificates generated successfully"
              echo "Certificate: /databunker/certs/{{ .Values.ssl.certificate.certFile }}"
              echo "Private Key: /databunker/certs/{{ .Values.ssl.certificate.keyFile }}"
              echo "Valid for {{ .Values.ssl.certificate.generateSelfSigned.duration }} days"
          volumeMounts:
            - name: ssl-certs
              mountPath: /databunker/certs
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ include "databunkerpro.fullname" . }}-env
          env:
            - name: DATABUNKER_WRAPPINGKEY_FILE
              value: "/var/run/secrets/kubernetes.io/serviceaccount/wrapping-key/wrapping-key"
            {{- if .Values.ssl.enabled }}
            - name: DATABUNKER_SSL_CERT_FILE
              value: "/databunker/certs/{{ .Values.ssl.certificate.certFile }}"
            - name: DATABUNKER_SSL_KEY_FILE
              value: "/databunker/certs/{{ .Values.ssl.certificate.keyFile }}"
            {{- if .Values.ssl.certificate.caFile }}
            - name: DATABUNKER_SSL_CA_FILE
              value: "/databunker/certs/{{ .Values.ssl.certificate.caFile }}"
            {{- end }}
            {{- end }}
            {{- if eq .Values.database.type "postgresql" }}
            - name: PGSQL_USER_PASS_FILE
              value: "/var/run/secrets/kubernetes.io/serviceaccount/postgres-password/postgres-password"
            {{- else if eq .Values.database.type "mysql" }}
            - name: MYSQL_USER_PASS_FILE
              value: "/var/run/secrets/kubernetes.io/serviceaccount/mysql-password/mysql-password"
            {{- end }}
            {{- if .Values.redis.auth.password }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "databunkerpro.fullname" . }}-redis
                  key: password
            {{- end }}
          ports:
            {{- if .Values.ssl.enabled }}
            - name: https
              containerPort: {{ .Values.config.databunker.port }}
              protocol: TCP
            {{- else }}
            - name: http
              containerPort: {{ .Values.config.databunker.port }}
              protocol: TCP
            {{- end }}
          {{- if .Values.ssl.enabled }}
          livenessProbe:
            httpGet:
              path: /status
              port: https
              scheme: HTTPS
          readinessProbe:
            httpGet:
              path: /status
              port: https
              scheme: HTTPS
          {{- else }}
          livenessProbe:
            httpGet:
              path: /status
              port: http
          readinessProbe:
            httpGet:
              path: /status
              port: http
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: config
              mountPath: /etc/databunker/databunker.yaml
              subPath: databunker.yaml
            - name: wrapping-key
              mountPath: /var/run/secrets/kubernetes.io/serviceaccount/wrapping-key
              readOnly: true
            {{- if .Values.ssl.enabled }}
            - name: ssl-certs
              mountPath: /databunker/certs
              readOnly: true
            {{- end }}
            {{- if and (not .Values.database.external) (eq .Values.database.type "mysql") (.Values.database.internal.mysql.enabled) }}
            - name: mysql-password
              mountPath: /var/run/secrets/kubernetes.io/serviceaccount/mysql-password
              readOnly: true
            {{- end }}
            {{- if and (not .Values.database.external) (eq .Values.database.type "postgresql") }}
            - name: postgres-password
              mountPath: /var/run/secrets/kubernetes.io/serviceaccount/postgres-password
              readOnly: true
            {{- end }}
          command: ["/databunker/bin/databunkerpro"]
          args:
            - "-db"
            - "databunkerdb"
            - "-conf"
            - "/databunker/conf/databunker.yaml"
      volumes:
        - name: config
          configMap:
            name: {{ include "databunkerpro.fullname" . }}-config
        - name: wrapping-key
          secret:
            secretName: {{ include "databunkerpro.fullname" . }}-wrapping-key
            items:
              - key: wrapping-key
                path: wrapping-key
        {{- if .Values.ssl.enabled }}
        - name: ssl-certs
          {{- if .Values.ssl.certificate.secretName }}
          secret:
            secretName: {{ .Values.ssl.certificate.secretName | default (printf "%s-tls" (include "databunkerpro.fullname" .)) }}
            items:
              - key: {{ .Values.ssl.certificate.certFile }}
                path: {{ .Values.ssl.certificate.certFile }}
              - key: {{ .Values.ssl.certificate.keyFile }}
                path: {{ .Values.ssl.certificate.keyFile }}
              {{- if .Values.ssl.certificate.caFile }}
              - key: {{ .Values.ssl.certificate.caFile }}
                path: {{ .Values.ssl.certificate.caFile }}
              {{- end }}
          {{- else if .Values.ssl.certificate.generateSelfSigned.enabled }}
          emptyDir:
            medium: Memory
            sizeLimit: "1Mi"
          {{- end }}
        {{- end }}
        {{- if and (not .Values.database.external) (eq .Values.database.type "mysql") (.Values.database.internal.mysql.enabled) }}
        - name: mysql-password
          secret:
            secretName: {{ include "databunkerpro.fullname" . }}-db
            items:
              - key: password
                path: mysql-password
        {{- end }}
        {{- if and (not .Values.database.external) (eq .Values.database.type "postgresql") }}
        - name: postgres-password
          secret:
            secretName: {{ include "databunkerpro.fullname" . }}-db
            items:
              - key: password
                path: postgres-password
        {{- end }} 