{{- if and (not .Values.database.external) (eq .Values.database.type "postgresql") }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "databunkerpro.fullname" . }}-postgresql-init
  labels:
    {{- include "databunkerpro.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgresql
data:
  init.sql: |
    CREATE ROLE mtenant NOSUPERUSER NOLOGIN;
    GRANT mtenant TO {{ .Values.database.internal.postgresql.auth.username }};
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "databunkerpro.fullname" . }}-postgresql
  labels:
    {{- include "databunkerpro.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgresql
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "databunkerpro.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: postgresql
  template:
    metadata:
      labels:
        {{- include "databunkerpro.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: postgresql
    spec:
      initContainers:
        - name: init-postgresql
          image: alpine:latest
          command:
            - /bin/sh
            - -c
            - |
              # Create PostgreSQL data directory and set ownership
              mkdir -p /var/lib/postgresql/data/pgdata
              chown -R 999:999 /var/lib/postgresql/data/pgdata
              {{- if and .Values.database.internal.postgresql.ssl.enabled .Values.database.internal.postgresql.ssl.generateSelfSigned }}
              # Install OpenSSL and generate SSL certificates
              apk add --no-cache openssl
              # Generate private key and certificate
              openssl req -new -text -subj /CN=localhost \
                -out /var/lib/postgresql/data/server.req \
                -keyout /var/lib/postgresql/data/server.key
              openssl req -x509 -in /var/lib/postgresql/data/server.req -text \
                -key /var/lib/postgresql/data/server.key \
                -out /var/lib/postgresql/data/server.crt
              # Set proper permissions
              chown 999:999 /var/lib/postgresql/data/server.*
              chmod 600 /var/lib/postgresql/data/server.key
              chmod 644 /var/lib/postgresql/data/server.crt
              # Clean up temporary files
              rm -f /var/lib/postgresql/data/server.req
              {{- end }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
      containers:
        - name: postgresql
          image: "{{ .Values.database.internal.postgresql.image.repository }}:{{ .Values.database.internal.postgresql.image.tag }}"
          resources:
            {{- toYaml .Values.database.internal.postgresql.resources | nindent 12 }}
          ports:
            - name: postgresql
              containerPort: 5432
              protocol: TCP
          env:
            - name: POSTGRES_DB
              value: {{ .Values.database.internal.postgresql.auth.database | quote }}
            - name: POSTGRES_USER
              value: {{ .Values.database.internal.postgresql.auth.username | quote }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "databunkerpro.fullname" . }}-db
                  key: password
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            {{- if .Values.database.internal.postgresql.ssl.enabled }}
            - name: POSTGRES_INITDB_ARGS
              value: "--auth-host=scram-sha-256"
            {{- end }}
          {{- if .Values.database.internal.postgresql.ssl.enabled }}
          command: ["postgres"]
          args:
            - "-c"
            - "ssl=on"
            - "-c"
            - "ssl_cert_file=/var/lib/postgresql/data/server.crt"
            - "-c"
            - "ssl_key_file=/var/lib/postgresql/data/server.key"
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
            - name: init-scripts
              mountPath: /docker-entrypoint-initdb.d
            {{- if and .Values.database.internal.postgresql.ssl.enabled (not .Values.database.internal.postgresql.ssl.generateSelfSigned) .Values.database.internal.postgresql.ssl.secretName }}
            - name: ssl-certs
              mountPath: /var/lib/postgresql/data/server.crt
              subPath: server.crt
              readOnly: true
            - name: ssl-certs
              mountPath: /var/lib/postgresql/data/server.key
              subPath: server.key
              readOnly: true
            {{- end }}
      volumes:
        - name: data
          {{- if .Values.database.internal.postgresql.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "databunkerpro.fullname" . }}-postgresql
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: init-scripts
          configMap:
            name: {{ include "databunkerpro.fullname" . }}-postgresql-init
        {{- if and .Values.database.internal.postgresql.ssl.enabled (not .Values.database.internal.postgresql.ssl.generateSelfSigned) .Values.database.internal.postgresql.ssl.secretName }}
        - name: ssl-certs
          secret:
            secretName: {{ .Values.database.internal.postgresql.ssl.secretName }}
        {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "databunkerpro.fullname" . }}-postgresql
  labels:
    {{- include "databunkerpro.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgresql
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: postgresql
      protocol: TCP
      name: postgresql
  selector:
    {{- include "databunkerpro.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: postgresql
{{- if .Values.database.internal.postgresql.persistence.enabled }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "databunkerpro.fullname" . }}-postgresql
  labels:
    {{- include "databunkerpro.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgresql
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.database.internal.postgresql.persistence.size }}
{{- end }}
{{- end }} 